import { NextRequest, NextResponse } from 'next/server'
import { fal } from '@fal-ai/client'

fal.config({
  credentials: process.env.FAL_KEY!,
})

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`

const rateLimit = new Map<string, number>()
const lastPrompts = new Map<string, string>()

export async function POST(req: NextRequest) {
  const body = await req.json()
  const chatId = body.message?.chat?.id
  const fullText = body.message?.text?.trim()

  if (!chatId || !fullText) return NextResponse.json({ ok: true })

  console.log(`üì• [${chatId}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${fullText}`)

  const parts = fullText.split('\n').map((p: string) => p.trim()).filter(Boolean)
  const first = parts[0].toLowerCase()
  const prompt = first.startsWith('/img ') ? parts[0].slice(5).trim() : null
  const otherMessages = parts.slice(prompt ? 1 : 0)

  if (prompt) {
    if (lastPrompts.get(chatId) === prompt) {
      console.log(`‚ö†Ô∏è [${chatId}] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π prompt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
    } else {
      const lastTime = rateLimit.get(chatId)
      if (lastTime && Date.now() - lastTime < 30_000) {
        console.log(`üö´ [${chatId}] –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å`)
        await sendText(chatId, '‚è± –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.')
      } else {
        rateLimit.set(chatId, Date.now())
        lastPrompts.set(chatId, prompt)

        try {
          const stablePrompt = `(${prompt}), trending on artstation, 8k, ultra realistic, concept art, cinematic lighting, detailed`

          const result = await fal.subscribe('fal-ai/fast-sdxl', {
            input: {
              prompt: stablePrompt,
              negative_prompt: 'ugly, deformed, dark, creepy, blurry, bad anatomy',
              image_size: 'square_hd',
              guidance_scale: 7.5,
              num_inference_steps: 25,
            },
            logs: true,
            onQueueUpdate(update) {
              if (update.status === 'IN_PROGRESS') {
                update.logs?.forEach(log => console.log('üì°', log.message))
              }
            },
          })

          const images = result?.data?.images
          const imageUrl = images?.[0]?.url

          if (images && images.length > 0 && imageUrl && imageUrl.startsWith('https://')) {
            await fetch(`${TELEGRAM_API}/sendPhoto`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: chatId,
                photo: imageUrl,
                caption: `üñº ${prompt}`,
              }),
            })
          } else {
            await sendText(chatId, 'üï≥ –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.')
          }
        } catch (err) {
          console.error('üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err)
          await sendText(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        }
      }
    }
  }

  for (const message of otherMessages) {
    try {
      console.log(`üîé [${chatId}] AI-–≤–æ–ø—Ä–æ—Å: ${message}`)

      const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'HTTP-Referer': 'https://railwaybot-production-82aa.up.railway.app',
          'X-Title': 'Telegram AI Bot',
        },
        body: JSON.stringify({
          model: 'openai/gpt-4o:online',
          messages: [{ role: 'user', content: message }],
        }),
      })

      const data = await res.json()
      const reply = data.choices?.[0]?.message?.content || 'ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.'

      await sendText(chatId, reply)
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI:', err)
      await sendText(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.')
    }
  }

  return NextResponse.json({ ok: true })
}

async function sendText(chatId: number, text: string) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text }),
  })
}
