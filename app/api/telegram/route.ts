import { NextRequest, NextResponse } from 'next/server'
import { fal } from '@fal-ai/client'

fal.config({
  credentials: process.env.FAL_KEY!,
})

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`

// –ü–∞–º—è—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
const rateLimit = new Map<string, number>()
const lastPrompts = new Map<string, string>()

export async function POST(req: NextRequest) {
  const body = await req.json()
  const chatId = body.message?.chat?.id
  const text = body.message?.text?.trim()

  if (!chatId || !text) return NextResponse.json({ ok: true })

  console.log(`üì• [${chatId}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, text)

  // === /img ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FAL ===
  if (/^\/img\s+/.test(text.toLowerCase())) {
    const prompt = text.slice(5).trim()

    // –∞–Ω—Ç–∏—Å–ø–∞–º
    if (lastPrompts.get(chatId) === prompt) {
      console.log(`‚ö†Ô∏è [${chatId}] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π prompt, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
      return NextResponse.json({ ok: true })
    }

    const lastTime = rateLimit.get(chatId)
    if (lastTime && Date.now() - lastTime < 30_000) {
      console.log(`üö´ [${chatId}] –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å`)
      await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '‚è± –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.',
        }),
      })
      return NextResponse.json({ ok: true })
    }

    rateLimit.set(chatId, Date.now())
    lastPrompts.set(chatId, prompt)

    try {
      console.log(`üß† [${chatId}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${prompt}`)

      const result = await fal.subscribe('fal-ai/fast-sdxl', {
        input: {
          prompt,
          image_size: 'square_hd',
          guidance_scale: 7.5,
          num_inference_steps: 25,
        },
        logs: true,
        onQueueUpdate(update) {
          if (update.status === 'IN_PROGRESS') {
            update.logs?.forEach(log => console.log('üì°', log.message))
          }
        },
      })

      const imageUrl = result?.data?.images?.[0]?.url

      if (imageUrl) {
        await fetch(`${TELEGRAM_API}/sendPhoto`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            photo: imageUrl,
            caption: `üñº ${prompt}`,
          }),
        })
      } else {
        throw new Error('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.')
      }
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err)
      await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
        }),
      })
    }

    return NextResponse.json({ ok: true })
  }

  // === –¢–µ–∫—Å—Ç–æ–≤—ã–π AI-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter (—Å –ø–æ–∏—Å–∫–æ–º) ===
  try {
    const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'HTTP-Referer': 'https://railwaybot-production-82aa.up.railway.app',
        'X-Title': 'Telegram AI Bot',
      },
      body: JSON.stringify({
        model: 'perplexity/pplx-70b-chat',
        messages: [{ role: 'user', content: text }],
      }),
    })

    const data = await res.json()
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.'

    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: reply,
      }),
    })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenRouter:', err)
    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ AI-–æ—Ç–≤–µ—Ç–∞.',
      }),
    })
  }

  return NextResponse.json({ ok: true })
}
